// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Circuit {
  id           String       @id @default(cuid())
  title        String
  duration     String
  price        String
  maxPeople    Int
  difficulty   String
  description  String
  highlights   Highlight[]  // Tableau de points forts
  included     Included[]   // Tableau inclus
  notIncluded  NotIncluded[] // Tableau non inclus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  itineraries  Itinerary[]  // Relation avec Itinerary

  @@map("circuits")
}

model Itinerary {
  id                String   @id @default(cuid())
  day               Int
  title             String
  description       String
  image             String
  imageDescription  String
  circuitId         String
  circuit           Circuit  @relation(fields: [circuitId], references: [id], onDelete: Cascade)

  @@map("itineraries")
}

model Highlight {
  id         String   @id @default(cuid())
  text       String
  circuitId  String
  circuit    Circuit  @relation(fields: [circuitId], references: [id], onDelete: Cascade)

  @@map("highlights")
}

model Included {
  id         String   @id @default(cuid())
  text       String
  circuitId  String
  circuit    Circuit  @relation(fields: [circuitId], references: [id], onDelete: Cascade)

  @@map("included")
}

model NotIncluded {
  id         String   @id @default(cuid())
  text       String
  circuitId  String
  circuit    Circuit  @relation(fields: [circuitId], references: [id], onDelete: Cascade)

  @@map("not_included")
}
model Reservation {
  id          String   @id @default(cuid())
  circuit     String
  nom         String
  prenom      String
  email       String
  telephone   String
  address     String
  personnes   Int
  startDate   DateTime
  endDate     DateTime
  duration    Int
  preferences String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reservation")
}
