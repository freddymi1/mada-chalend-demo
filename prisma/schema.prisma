// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Circuit {
  id             String           @id @default(cuid())
  title          String
  duration       String
  price          String
  maxPeople      Int?
  difficulty     String
  description    String
  itinereryImage String?
  highlights     Highlight[] // Tableau de points forts
  included       Included[] // Tableau inclus
  notIncluded    NotIncluded[] // Tableau non inclus
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  itineraries    Itinerary[] // Relation avec Itinerary
  reservations   Reservation[] // Relation avec Reservation (nouvelle relation)
  circuitRequest CircuitRequest[]

  @@map("circuits")
}

model TripTravel {
  id           String        @id @default(cuid())
  title        String
  price        String
  duration     String? @default("0")
  description  String
  highlights   Highlight[] // Tableau de points forts
  included     Included[] // Tableau inclus
  notIncluded  NotIncluded[] // Tableau non inclus
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  program      Program[] // Relation avec Itinerary
  reservations Reservation[] // Relation avec Reservation (nouvelle relation)
  travelDates  TravelDates[] // Relation avec TravelDates

  @@map("trip")
}

model TravelDates{
  id          String   @id @default(cuid())
  startDate   DateTime
  duration    Int? @default(0)
  endDate     DateTime
  maxPeople    Int? @default(0)
  price        Int? @default(0)
  tripTravelId String
  tripTravel  TripTravel @relation(fields: [tripTravelId], references: [id], onDelete: Cascade)
  reservations  Reservation[]

  @@map("travel_dates")
}

model Itinerary {
  id               String  @id @default(cuid())
  day              Int
  title            String
  description      String
  image            String
  imageDescription String
  distance         Int? @default(0)
  circuitId        String
  circuit          Circuit @relation(fields: [circuitId], references: [id], onDelete: Cascade)

  @@map("itineraries")
}

model Program {
  id               String     @id @default(cuid())
  day              Int
  title            String
  description      String
  image            String
  imageDescription String
  tripTravelId     String
  tripTravel       TripTravel @relation(fields: [tripTravelId], references: [id], onDelete: Cascade)

  @@map("program")
}

model Highlight {
  id           String      @id @default(cuid())
  text         String
  circuitId    String?
  circuit      Circuit?    @relation(fields: [circuitId], references: [id], onDelete: Cascade)
  TripTravel   TripTravel? @relation(fields: [tripTravelId], references: [id])
  tripTravelId String?

  @@map("highlights")
}

model Included {
  id           String      @id @default(cuid())
  text         String
  circuitId    String?
  circuit      Circuit?    @relation(fields: [circuitId], references: [id], onDelete: Cascade)
  tripTravelId String?
  tripTravel   TripTravel? @relation(fields: [tripTravelId], references: [id], onDelete: Cascade)

  @@map("included")
}

model NotIncluded {
  id           String      @id @default(cuid())
  text         String
  circuitId    String?
  circuit      Circuit?    @relation(fields: [circuitId], references: [id], onDelete: Cascade)
  tripTravelId String?
  TripTravel   TripTravel? @relation(fields: [tripTravelId], references: [id])

  @@map("not_included")
}

model Reservation {
  id           String      @id @default(cuid())
  resType      String      @default("circuit")
  circuitId    String? // Nouveau champ pour la relation
  vehicleId    String?
  nom          String
  prenom       String
  email        String
  telephone    String
  address      String
  personnes    Int
  nbrChild     Int         @default(0)
  nbrAdult     Int         @default(0)
  nbrAge2_3    Int?        @default(0)
  nbrAge4_7    Int?        @default(0)
  nbrAge8_10   Int?        @default(0)
  nbrAge11     Int?        @default(0)
  startDate    DateTime?
  endDate      DateTime?
  duration     Int?
  preferences  String?
  status       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  circuitRel   Circuit?    @relation(fields: [circuitId], references: [id], onDelete: Cascade) // Relation
  vehicleRel   Vehicle?    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  tripTravelId String?
  TripTravel   TripTravel? @relation(fields: [tripTravelId], references: [id])
  travelDateId   String?     // ✅ nouvelle clé étrangère vers TravelDates
  travelDate     TravelDates? @relation(fields: [travelDateId], references: [id], onDelete: Cascade)


  @@map("reservations") // Changé de "reservation" à "reservations" pour plus de cohérence
}

model Vehicle {
  id           String        @id @default(cuid())
  name         String
  categoryId   String
  type         String
  passengers   Int
  pricePerDay  Float
  rating       Float
  mainImage    String
  detailImages String[]
  features     String[]
  description  String
  status       String        @default("dispo")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  categoryRel  Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  reservations Reservation[]

  @@map("vehicles")
}

model Category {
  id        String    @id
  name      String
  icon      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  vehicles  Vehicle[]

  @@map("categories")
}

// schema.prisma (extrait)

model CircuitRequest {
  id          String    @id @default(cuid())
  nom         String
  prenom      String
  email       String
  telephone   String
  adresse     String?
  nbPersonnes Int? // si tu préfères String, remplace par String
  dateDepart  DateTime? // nullable si non renseigné
  circuitId   String? // nom ou id du circuit demandé
  budget      String? // si budget en nombre, sinon String
  duree       String? // ex: "3 jours"
  message     String?

  circuitRel Circuit? @relation(fields: [circuitId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("circuit_request")
}

model PartenariatRequest {
  id              String   @id @default(cuid())
  nom             String
  prenom          String
  email           String
  telephone       String
  nomEntreprise   String?
  objet           String?
  typePartenariat String? // ex: "sponsorship", "collaboration"
  description     String?
  message         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("partner_request")
}

model AutreRequest {
  id          String   @id @default(cuid())
  nom         String
  prenom      String
  email       String
  telephone   String
  adresse     String?
  objet       String?
  typeService String? // ex: "support", "infos", "reservation"
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("other_request")
}

model User {
  id       String @id @default(cuid())
  username String @unique
  email    String @unique
  password String
  role     String @default("admin")

  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Blog {
  id          String    @id @default(cuid())
  title       String?
  image       String?
  articles    Article[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@map("blog")
}

model Article {
  id               String    @id @default(cuid())
  title            String?
  description      String?
  image            String?
  caption          String?
  blogId           String
  blog             Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  comments         Comment[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt

  @@map("article")
}

model Comment {
  id      String  @id @default(cuid())
  content String
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  blogId String?
  blog   Blog?   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  articleId String?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("comment")
}
